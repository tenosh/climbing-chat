generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  nickname      String?
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Area {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  approach    String?
  ethic       String?
  createdAt   DateTime @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt   DateTime @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @updatedAt @db.Timestamptz(6)
  place_id    String?
  image       String?  @default("")
  Place       Place?   @relation(fields: [place_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  routes      Route[]

  @@index([name])
}

model Route {
  id          String    @id @default(uuid())
  name        String
  description String?
  grade       String?
  createdAt   DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @db.Timestamptz(6)
  updatedAt   DateTime? @default(dbgenerated("(now() AT TIME ZONE 'utc'::text)")) @updatedAt @db.Timestamptz(6)
  areaId      String
  bolts       Int?      @db.SmallInt
  createdBy   String?
  length      Int?      @db.SmallInt
  quality     Int?      @db.SmallInt
  type        String?
  area        Area      @relation(fields: [areaId], references: [id])

  @@unique([areaId, name])
  @@index([grade])
  @@index([type])
}

model Place {
  created_at  DateTime     @default(now()) @db.Timestamptz(6)
  name        String?      @default("")
  description String?      @default("")
  latitude    Decimal?     @db.Decimal
  longitude   Decimal?     @db.Decimal
  danger      Decimal?     @db.Decimal
  id          String       @id(map: "Places_pkey") @default("")
  image       String?      @default("")
  Area        Area[]
  place_data  place_data[]
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model place_data {
  id           BigInt                 @id @default(autoincrement())
  chunk_number Int
  title        String                 @db.VarChar
  summary      String                 @db.VarChar
  content      String
  metadata     Json                   @default("{}")
  embedding    Unsupported("vector")?
  created_at   DateTime               @default(dbgenerated("timezone('utc'::text, now())")) @db.Timestamptz(6)
  place_id     String?
  Place        Place?                 @relation(fields: [place_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([metadata], map: "idx_place_data_metadata", type: Gin)
  @@index([embedding])
}
